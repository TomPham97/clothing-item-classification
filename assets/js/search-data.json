{
  
    
        "post0": {
            "title": "Title",
            "content": ". from fastai.vision.all import * from huggingface_hub import push_to_hub_fastai, from_pretrained_fastai import gradio as gr import skimage . ModuleNotFoundError Traceback (most recent call last) /Users/tompham/Document Files/Programming/GitHub/clothing-item-classification/_notebooks/2022-08-02-deploy-app.ipynb Cell 2 in &lt;cell line: 3&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/tompham/Document%20Files/Programming/GitHub/clothing-item-classification/_notebooks/2022-08-02-deploy-app.ipynb#ch0000001?line=0&#39;&gt;1&lt;/a&gt; #|export &lt;a href=&#39;vscode-notebook-cell:/Users/tompham/Document%20Files/Programming/GitHub/clothing-item-classification/_notebooks/2022-08-02-deploy-app.ipynb#ch0000001?line=1&#39;&gt;2&lt;/a&gt; from fastai.vision.all import * -&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/tompham/Document%20Files/Programming/GitHub/clothing-item-classification/_notebooks/2022-08-02-deploy-app.ipynb#ch0000001?line=2&#39;&gt;3&lt;/a&gt; from huggingface_hub import push_to_hub_fastai, from_pretrained_fastai &lt;a href=&#39;vscode-notebook-cell:/Users/tompham/Document%20Files/Programming/GitHub/clothing-item-classification/_notebooks/2022-08-02-deploy-app.ipynb#ch0000001?line=3&#39;&gt;4&lt;/a&gt; import gradio as gr &lt;a href=&#39;vscode-notebook-cell:/Users/tompham/Document%20Files/Programming/GitHub/clothing-item-classification/_notebooks/2022-08-02-deploy-app.ipynb#ch0000001?line=4&#39;&gt;5&lt;/a&gt; import skimage ModuleNotFoundError: No module named &#39;huggingface_hub&#39; . title = &quot;Clothing item classifier&quot; description = &quot;A fastai model based classifer that can distinguish between shirts, pants, dresses, and socks.&quot; interpretation = &#39;default&#39; enable_queue = True . learn = from_pretrained_fastai(&quot;tompham97/clothe-classifier&quot;) labels = learn.dls.vocab . NameError Traceback (most recent call last) /Users/tompham/Document Files/Programming/GitHub/clothing-item-classification/_notebooks/2022-08-02-deploy-app.ipynb Cell 4 in &lt;cell line: 2&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/tompham/Document%20Files/Programming/GitHub/clothing-item-classification/_notebooks/2022-08-02-deploy-app.ipynb#ch0000003?line=0&#39;&gt;1&lt;/a&gt; #|export -&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/tompham/Document%20Files/Programming/GitHub/clothing-item-classification/_notebooks/2022-08-02-deploy-app.ipynb#ch0000003?line=1&#39;&gt;2&lt;/a&gt; learn = from_pretrained_fastai(&#34;tompham97/clothe-classifier&#34;) &lt;a href=&#39;vscode-notebook-cell:/Users/tompham/Document%20Files/Programming/GitHub/clothing-item-classification/_notebooks/2022-08-02-deploy-app.ipynb#ch0000003?line=2&#39;&gt;3&lt;/a&gt; labels = learn.dls.vocab NameError: name &#39;from_pretrained_fastai&#39; is not defined . def classify_image(img): pred, idx, probs = learn.predict(img) return {labels[i]: float(probs[i]) for i in range(len(labels))} . image = gr.inputs.Image(shape=(192, 192)) label = gr.outputs.Label() examples = [&#39;dress.webp&#39;, &#39;pants.webp&#39;, &#39;shirt.jpeg&#39;, &#39;socks.jpeg&#39;] . intf = gr.Interface(fn=classify_image, inputs=image, outputs=label, title=title, description=description, examples=examples, interpretation=interpretation, enable_queue=enable_queue) intf.launch() . from nbdev.export import notebook2script notebook2script(&#39;app.ipynb&#39;) . ImportError Traceback (most recent call last) /Users/tompham/Document Files/Programming/GitHub/clothing-item-classification/_notebooks/2022-08-02-deploy-app.ipynb Cell 8 in &lt;cell line: 2&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/tompham/Document%20Files/Programming/GitHub/clothing-item-classification/_notebooks/2022-08-02-deploy-app.ipynb#ch0000007?line=0&#39;&gt;1&lt;/a&gt; import fastai -&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/tompham/Document%20Files/Programming/GitHub/clothing-item-classification/_notebooks/2022-08-02-deploy-app.ipynb#ch0000007?line=1&#39;&gt;2&lt;/a&gt; from nbdev.export import notebook2script &lt;a href=&#39;vscode-notebook-cell:/Users/tompham/Document%20Files/Programming/GitHub/clothing-item-classification/_notebooks/2022-08-02-deploy-app.ipynb#ch0000007?line=2&#39;&gt;3&lt;/a&gt; notebook2script(&#39;app.ipynb&#39;) ImportError: cannot import name &#39;notebook2script&#39; from &#39;nbdev.export&#39; (/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/nbdev/export.py) .",
            "url": "https://tompham97.github.io/clothing-item-classification/2022/08/02/deploy-app.html",
            "relUrl": "/2022/08/02/deploy-app.html",
            "date": " • Aug 2, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Train a fastai model to recognize clothing items such as shirts, pants, socks, and dresses",
            "content": "# This code is only here to check that your internet is enabled. It doesn&#39;t do anything else. # Here&#39;s a help thread on getting your phone number verified: https://www.kaggle.com/product-feedback/135367 import socket,warnings try: socket.setdefaulttimeout(1) socket.socket(socket.AF_INET, socket.SOCK_STREAM).connect((&#39;1.1.1.1&#39;, 53)) except socket.error as ex: raise Exception(&quot;STOP: No internet. Click &#39;&gt;|&#39; in top right and set &#39;Internet&#39; switch to on&quot;) . Create categories and a data folder . clothe_types = &#39;shirt&#39;, &#39;pants&#39;, &#39;dress&#39;, &#39;socks&#39; path = Path(&#39;clothes&#39;) . if not path.exists(): path.mkdir() for o in clothe_types: dest = (path/o) dest.mkdir(exist_ok = True) results = search_images_ddg(f&#39;{o}&#39;) download_images(dest, urls=results) . fns = get_image_files(path) fns . (#767) [Path(&#39;clothes/dress/5b9739fc-872a-4e83-9d9c-c6b88f613c06.jpg&#39;),Path(&#39;clothes/dress/228900a3-56d1-4b0b-97ce-0d783c793ff4.jpg&#39;),Path(&#39;clothes/dress/b51af53d-8e13-4fe7-b0ef-8b95999dfe7c.jpg&#39;),Path(&#39;clothes/dress/24596662-fc17-4e85-9547-b4bb22c36019.jpg&#39;),Path(&#39;clothes/dress/130155b0-865d-429c-97ec-74fbc7bb7303.jpg&#39;),Path(&#39;clothes/dress/74ac7b27-ac77-46ea-8d0e-70c56c7a2663.jpg&#39;),Path(&#39;clothes/dress/f6cbd208-4f8f-458f-bae9-7fd993c16a65.jpg&#39;),Path(&#39;clothes/dress/5e04d959-4ea3-45bb-b43e-ea618595f128.jpg&#39;),Path(&#39;clothes/dress/e00bf0da-20cf-47bb-b16c-2f5b351706a5.jpg&#39;),Path(&#39;clothes/dress/aaef98c6-e8a4-48a9-815e-b3771b0d29fd.jpg&#39;)...] . Unlink files with broken urls . failed = verify_images(fns) failed . (#25) [Path(&#39;clothes/shirt/89d107f5-2fac-4fbb-b576-cbd4203a05d1.jpg&#39;),Path(&#39;clothes/shirt/15c439c0-30d8-4156-a87a-d4a6f5edab69.jpg&#39;),Path(&#39;clothes/shirt/13119c95-82b4-4788-950d-52b03253faf0.jpg&#39;),Path(&#39;clothes/shirt/3dc2744d-a023-4147-b988-0a1aa5f6468e.jpg&#39;),Path(&#39;clothes/shirt/cef7c425-d211-4824-ac37-c768cc766552.jpg&#39;),Path(&#39;clothes/shirt/9a0db9ae-6393-4c08-a25f-f1faecde7a99.jpg&#39;),Path(&#39;clothes/pants/edb1cce0-b201-4a25-aa02-fec3c10d1716.jpg&#39;),Path(&#39;clothes/pants/ea606fb1-94d2-412a-a0a9-08f1838e5f8d.jpg&#39;),Path(&#39;clothes/pants/33bc3b64-5005-46f9-b17b-6e196dde9da4.jpg&#39;),Path(&#39;clothes/socks/35e0baf2-78a7-4ce1-9dea-bca52195caf7.jpg&#39;)...] . failed.map(Path.unlink) . (#25) [None,None,None,None,None,None,None,None,None,None...] . Create a datablock to import and split the data into train and test sets . clothe = DataBlock( blocks = (ImageBlock, CategoryBlock), get_items = get_image_files, splitter = RandomSplitter(valid_pct = 0.2, seed = 0), get_y = parent_label, item_tfms = Resize(128)) . Transform and augment the data . clothe = clothe.new( item_tfms = RandomResizedCrop(224, min_scale = 0.5), batch_tfms = aug_transforms()) dls = clothe.dataloaders(path) . Apply a fastai vision model to the data . See article by Jeremy Howard about which model is best for image classification . List of Pytorch image models . %%capture !pip install timm . import timm timm.list_models(&#39;convnext*&#39;) . [&#39;convnext_base&#39;, &#39;convnext_base_384_in22ft1k&#39;, &#39;convnext_base_in22ft1k&#39;, &#39;convnext_base_in22k&#39;, &#39;convnext_large&#39;, &#39;convnext_large_384_in22ft1k&#39;, &#39;convnext_large_in22ft1k&#39;, &#39;convnext_large_in22k&#39;, &#39;convnext_nano&#39;, &#39;convnext_nano_hnf&#39;, &#39;convnext_nano_ols&#39;, &#39;convnext_small&#39;, &#39;convnext_small_384_in22ft1k&#39;, &#39;convnext_small_in22ft1k&#39;, &#39;convnext_small_in22k&#39;, &#39;convnext_tiny&#39;, &#39;convnext_tiny_384_in22ft1k&#39;, &#39;convnext_tiny_hnf&#39;, &#39;convnext_tiny_in22ft1k&#39;, &#39;convnext_tiny_in22k&#39;, &#39;convnext_xlarge_384_in22ft1k&#39;, &#39;convnext_xlarge_in22ft1k&#39;, &#39;convnext_xlarge_in22k&#39;] . Select a model to use for training . learn = vision_learner(dls, resnet34, metrics = error_rate) learn.fine_tune(4) . NameError Traceback (most recent call last) Input In [23], in &lt;cell line: 1&gt;() -&gt; 1 learn = vision_learner(dls, &#39;convnext_tiny_in22ft1k&#39;, metrics = error_rate) 2 learn.fine_tune(4) File /usr/local/lib/python3.9/dist-packages/fastai/vision/learner.py:224, in vision_learner(dls, arch, normalize, n_out, pretrained, loss_func, opt_func, lr, splitter, cbs, metrics, path, model_dir, wd, wd_bn_bias, train_bn, moms, cut, init, custom_head, concat_pool, pool, lin_ftrs, ps, first_bn, bn_final, lin_first, y_range, **kwargs) 221 model_args = dict(init=init, custom_head=custom_head, concat_pool=concat_pool, pool=pool, lin_ftrs=lin_ftrs, ps=ps, 222 first_bn=first_bn, bn_final=bn_final, lin_first=lin_first, y_range=y_range, **kwargs) 223 if isinstance(arch, str): --&gt; 224 model,cfg = create_timm_model(arch, n_out, default_split, pretrained, **model_args) 225 if normalize: _timm_norm(dls, cfg, pretrained) 226 else: File /usr/local/lib/python3.9/dist-packages/fastai/vision/learner.py:186, in create_timm_model(arch, n_out, cut, pretrained, n_in, init, custom_head, concat_pool, pool, lin_ftrs, ps, first_bn, bn_final, lin_first, y_range, **kwargs) 183 def create_timm_model(arch, n_out, cut=None, pretrained=True, n_in=3, init=nn.init.kaiming_normal_, custom_head=None, 184 concat_pool=True, pool=True, lin_ftrs=None, ps=0.5, first_bn=True, bn_final=False, lin_first=False, y_range=None, **kwargs): 185 &#34;Create custom architecture using `arch`, `n_in` and `n_out` from the `timm` library&#34; --&gt; 186 model = timm.create_model(arch, pretrained=pretrained, num_classes=0, in_chans=n_in, **kwargs) 187 body = TimmBody(model, pretrained, None, n_in) 188 nf = body.model.num_features NameError: name &#39;timm&#39; is not defined . Investigate the performance of the model . interp = ClassificationInterpretation.from_learner(learn) interp.plot_confusion_matrix() . /usr/local/lib/python3.9/dist-packages/PIL/Image.py:959: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( . /usr/local/lib/python3.9/dist-packages/PIL/Image.py:959: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( . Data points with the highest losses . Either wrong results with high confidence or correct results with low confidence . interp.plot_top_losses(10, nrows = 2, figsize = (17,4)) . Clean the data . cleaner = ImageClassifierCleaner(learn) cleaner . /usr/local/lib/python3.9/dist-packages/PIL/Image.py:959: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( /usr/local/lib/python3.9/dist-packages/PIL/Image.py:959: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( /usr/local/lib/python3.9/dist-packages/PIL/Image.py:959: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( . /usr/local/lib/python3.9/dist-packages/PIL/Image.py:959: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( . for idx in cleaner.delete(): cleaner.fns[idx].unlink() for idx, cat in cleaner.change(): shutil.move(str(cleaner.fns[idx]), path/cat) . Upload the model to HuggingFace hub . Install git-lfs, a dependency for uploading to the hub . !sudo apt-get install git-lfs !git lfs install . Reading package lists... Done Building dependency tree Reading state information... Done E: Unable to locate package git-lfs git: &#39;lfs&#39; is not a git command. See &#39;git --help&#39;. The most similar command is log . Login into the hub with &#39;write&#39; token access . from huggingface_hub import notebook_login notebook_login() . from huggingface_hub import push_to_hub_fastai repo_id = &quot;tompham97/clothe-classifier&quot; push_to_hub_fastai(learner = learn, repo_id = repo_id) . FileNotFoundError Traceback (most recent call last) File /usr/local/lib/python3.9/dist-packages/huggingface_hub/repository.py:567, in Repository.check_git_versions(self) 566 try: --&gt; 567 lfs_version = run_subprocess( 568 &#34;git-lfs --version&#34;.split(), self.local_dir 569 ).stdout.strip() 570 except FileNotFoundError: File /usr/local/lib/python3.9/dist-packages/huggingface_hub/utils/_subprocess.py:51, in run_subprocess(command, folder, check, **kwargs) 49 raise ValueError(&#34;`run_subprocess` should be called with a list of strings.&#34;) &gt; 51 return subprocess.run( 52 command, 53 stderr=subprocess.PIPE, 54 stdout=subprocess.PIPE, 55 check=check, 56 encoding=&#34;utf-8&#34;, 57 cwd=folder, 58 **kwargs, 59 ) File /usr/lib/python3.9/subprocess.py:505, in run(input, capture_output, timeout, check, *popenargs, **kwargs) 503 kwargs[&#39;stderr&#39;] = PIPE --&gt; 505 with Popen(*popenargs, **kwargs) as process: 506 try: File /usr/lib/python3.9/subprocess.py:951, in Popen.__init__(self, args, bufsize, executable, stdin, stdout, stderr, preexec_fn, close_fds, shell, cwd, env, universal_newlines, startupinfo, creationflags, restore_signals, start_new_session, pass_fds, user, group, extra_groups, encoding, errors, text, umask) 948 self.stderr = io.TextIOWrapper(self.stderr, 949 encoding=encoding, errors=errors) --&gt; 951 self._execute_child(args, executable, preexec_fn, close_fds, 952 pass_fds, cwd, env, 953 startupinfo, creationflags, shell, 954 p2cread, p2cwrite, 955 c2pread, c2pwrite, 956 errread, errwrite, 957 restore_signals, 958 gid, gids, uid, umask, 959 start_new_session) 960 except: 961 # Cleanup if the child failed starting. File /usr/lib/python3.9/subprocess.py:1821, in Popen._execute_child(self, args, executable, preexec_fn, close_fds, pass_fds, cwd, env, startupinfo, creationflags, shell, p2cread, p2cwrite, c2pread, c2pwrite, errread, errwrite, restore_signals, gid, gids, uid, umask, start_new_session) 1820 err_msg = os.strerror(errno_num) -&gt; 1821 raise child_exception_type(errno_num, err_msg, err_filename) 1822 raise child_exception_type(err_msg) FileNotFoundError: [Errno 2] No such file or directory: &#39;git-lfs&#39; During handling of the above exception, another exception occurred: OSError Traceback (most recent call last) Input In [29], in &lt;cell line: 5&gt;() 1 from huggingface_hub import push_to_hub_fastai 3 repo_id = &#34;tompham97/clothe-classifier&#34; -&gt; 5 push_to_hub_fastai(learner = learn, repo_id = repo_id) File /usr/local/lib/python3.9/dist-packages/huggingface_hub/fastai_utils.py:427, in push_to_hub_fastai(learner, repo_id, commit_message, private, token, config, **kwargs) 418 repo_url = HfApi(endpoint=api_endpoint).create_repo( 419 repo_id, 420 token=token, (...) 423 exist_ok=True, 424 ) 426 # If repository exists in the Hugging Face Hub then clone it locally in `repo_id`. --&gt; 427 repo = Repository( 428 repo_id, 429 clone_from=repo_url, 430 use_auth_token=token, 431 git_user=git_user, 432 git_email=git_email, 433 ) 434 repo.git_pull(rebase=True) 436 _save_pretrained_fastai(learner, repo_id, config=config) File /usr/local/lib/python3.9/dist-packages/huggingface_hub/repository.py:489, in Repository.__init__(self, local_dir, clone_from, repo_type, use_auth_token, git_user, git_email, revision, private, skip_lfs_files, client) 486 self.skip_lfs_files = skip_lfs_files 487 self.client = client if client is not None else HfApi() --&gt; 489 self.check_git_versions() 491 if isinstance(use_auth_token, str): 492 self.huggingface_token = use_auth_token File /usr/local/lib/python3.9/dist-packages/huggingface_hub/repository.py:571, in Repository.check_git_versions(self) 567 lfs_version = run_subprocess( 568 &#34;git-lfs --version&#34;.split(), self.local_dir 569 ).stdout.strip() 570 except FileNotFoundError: --&gt; 571 raise EnvironmentError( 572 &#34;Looks like you do not have git-lfs installed, please install.&#34; 573 &#34; You can install from https://git-lfs.github.com/.&#34; 574 &#34; Then run `git lfs install` (you only have to do this once).&#34; 575 ) 576 logger.info(git_version + &#34; n&#34; + lfs_version) OSError: Looks like you do not have git-lfs installed, please install. You can install from https://git-lfs.github.com/. Then run `git lfs install` (you only have to do this once). .",
            "url": "https://tompham97.github.io/clothing-item-classification/2022/08/02/clothe-classifier-fastai-model.html",
            "relUrl": "/2022/08/02/clothe-classifier-fastai-model.html",
            "date": " • Aug 2, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://tompham97.github.io/clothing-item-classification/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://tompham97.github.io/clothing-item-classification/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}